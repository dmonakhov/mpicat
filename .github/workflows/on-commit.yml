name: Build Debian Package

on:
  push:
    branches: [ main, feature/*, bugfix/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  SLOTS: 2

jobs:
  test-source:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          debhelper \
          devscripts \
          libopenmpi-dev

    - name: Build mpicat
      run: |
        make

    - name: Test mpicat functionality
      run: |
        echo "Testing mpicat with simple data distribution"
        echo "Hello from rank 0" | mpirun -n ${SLOTS} ./mpicat | sort | uniq -c | grep -c "^[ ]*${SLOTS}[ ]*"
        echo "Test completed successfully"

    - name: Test with larger data
      run: |
        echo "Testing with larger dataset"
        dd if=/dev/urandom bs=1024 count=100 2>/dev/null | mpirun -n ${SLOTS} bash -c './mpicat | sha256sum' | sort | uniq -c | grep -c "^[ ]*${SLOTS}[ ]*"
        echo "Large data test completed"

  build-debian:
    runs-on: ubuntu-latest
    needs: [test-source]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          debhelper \
          devscripts \
          libopenmpi-dev

    - name: Update version from git describe
      run: |
        sed "s/Version: .*/Version: $(git describe --tags | sed -e 's/v//')/" debian/control.template > debian/control

    - name: Build Debian package
      run: |
        dpkg-buildpackage -us -uc -b
        ls -la ../*.deb

    - name: Test package installation
      run: |
        sudo dpkg -i ../mpicat_*.deb
        mpicat --help || echo "mpicat installed successfully"

    - name: Pull up packages
      run: |
        cp ../*deb .
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mpicat-debian-openmpi
        path: ./*.deb
        retention-days: 30

  build-source:
    runs-on: ubuntu-latest
    needs: [test-source]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          debhelper \
          devscripts \
          libopenmpi-dev

    - name: Update version from git describe
      run: |
        sed "s/Version: .*/Version: $(git describe --tags | sed -e 's/v//')/" debian/control.template > debian/control

    - name: Build source package
      run: |
        dpkg-buildpackage -S
        ls -la ../*.dsc ../*.tar.gz ../*.changes

    - name: Pull up source packages
      run: |
        cp ../*dsc ../*tar.gz ../*changes .

    - name: Upload source package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mpicat-source-openmpi
        path: |
          ./*.dsc
          ./*.tar.gz
          ./*.changes
        retention-days: 30

  test-package:
    runs-on: ubuntu-latest
    needs: [build-debian]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: mpicat-debian-openmpi
        path: ./packages

    - name: Install MPI runtime
      run: |
        sudo apt-get update
        sudo apt-get install -y openmpi-bin

    - name: Install package
      run: |
        sudo dpkg -i ./packages/*.deb

    - name: Test mpicat functionality
      run: |
        echo "Testing mpicat with simple data distribution"
        echo "Hello from rank 0" | mpirun -n ${SLOTS} mpicat | sort | uniq -c | grep -c "^[ ]*${SLOTS}[ ]*"
        echo "Test completed successfully"

    - name: Test with larger data
      run: |
        echo "Testing with larger dataset"
        dd if=/dev/urandom bs=1024 count=100 2>/dev/null | mpirun -n ${SLOTS} bash -c 'mpicat | sha256sum' | sort | uniq -c | grep -c "^[ ]*${SLOTS}[ ]*"
        echo "Large data test completed"
